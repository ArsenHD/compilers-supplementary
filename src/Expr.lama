-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

public fun evalBinOp (op, left, right) {
  case op of
    "+" -> left + right
    | "-" -> left - right
    | "*" -> left * right
    | "/" -> left / right
    | "%" -> left % right
    | "<" -> left < right
    | ">" -> left > right
    | "<=" -> left <= right
    | ">=" -> left >= right
    | "==" -> left == right
    | "!=" -> left != right
    | "&&" -> left && right
    | "!!" -> left !! right
  esac
}

fun eval (c@[st, w], expr) {
  case expr of
      Assn (name, value) ->
        case evalList (c, name : value : {}) of
          [c@[st, w], Ref (x) : v : {}] -> [[st <- [x, v], w], v]
        esac
    | Seq (first, second) ->
        case eval (c, first) of
          [c, _] -> eval (c, second)
        esac
    | Skip -> [c, Bottom]
    | Read (expr) ->
        case eval (c, expr) of [c@[st, w], Ref (name)] ->
          case readWorld (w) of [value, w] ->
            [[st <- [name, value], w], Bottom]
          esac
        esac
    | Write (e) ->
        case eval (c, e) of
          [[st, w], value] -> [[st, writeWorld (value , w)], Bottom]
        esac
    | If (cond, thenExpr, elseExpr) ->
        case eval (c, cond) of
          [c, n] ->
            if n == 0
              then eval (c, elseExpr)
              else eval (c, thenExpr)
            fi
        esac
    | While (cond, body) ->
        case eval (c, cond) of
          [c, n] ->
            if n == 0
              then [c, Bottom]
              else
                case eval (c, body) of
                  [c, _] -> eval (c, While (cond, body))
                esac
            fi
        esac
    | DoWhile (body, cond) -> eval (c, Seq (body, While (cond, body)))
    | Var (name) -> [c, st (name)]
    | Ref (name) -> [c, Ref (name)]
    | Const (n)  -> [c, n]
    | Binop (op, l, r) ->
      case evalList (c, l : r : {}) of
        [c, w : v : {}] -> [c, evalBinOp (op, w, v)]
      esac
    | Ignore (expr) ->
        case eval (c, expr) of
          [c, _] -> [c, Bottom]
        esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
