-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun createBinOp(l, op, r) {
  Binop(op, l, r)
}

fun getBinOpDescription(op) {
  [s(op), createBinOp]
}

var binOpDescriptors = {
  [Left, { getBinOpDescription ("!!") }],
  [Left, { getBinOpDescription ("&&") }],
  [Nona, map (getBinOpDescription, { "==", "!=", "<=", "<", ">=", ">" })],
  [Left, map (getBinOpDescription, { "+", "-" })],
  [Left, map (getBinOpDescription, { "*", "/", "%" })]
};

-- Primary expression
var primaryExpr = memo $ eta syntax (x=decimal { Const (stringInt (x)) } |
                                 x=lident  { Var (x) }               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta (expr (binOpDescriptors, primaryExpr));

var primaryStmt = memo $ eta syntax (
      kRead variable=inbr[s("("), lident, s(")")] { Read (variable) } |
      kWrite value=inbr[s("("), exp, s(")")]      { Write (value) }   |
      kSkip                                       { Skip }            |
      variable=lident s[":="] value=exp           { Assn (variable, value) }
    ),
    stmt = memo $ eta syntax (
      primaryStmt |
      l=primaryStmt s[";"] r=stmt { Seq (l, r) }
    );

-- Public top-level parser
public parse = stmt;
