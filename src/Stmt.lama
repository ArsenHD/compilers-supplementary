-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, w], stmt) {
    case stmt of
      Assn (x, e) -> [st <- [x, evalExpr (st, e)], w]
    | Seq (l, r)       -> eval (eval (c, l), r)
    | Skip             -> c
    | Read (x)         -> (
        var data = readWorld (w);
        var value = data.fst;
        var nw = data.snd;
        [st <- [x, value], nw]
      )
    | Write (e)       -> [st, writeWorld (evalExpr (st, e), w)]
    | If (condition, thenBranch, elseBranch) ->
      if evalExpr (st, condition) == 0
        then eval (c, elseBranch)
        else eval (c, thenBranch)
      fi
    | While (condition, body) ->
      if evalExpr (st, condition) == 0
        then c
        else eval (eval (c, body), While (condition, body))
      fi
    | DoWhile (body, condition) -> eval (eval (c, body), While (condition, body))
    esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
