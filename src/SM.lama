-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
    fun evalInstruction(c@[stack, st, w], instr) {
        case instr of
              READ       -> (
                var data = readWorld (w);
                var v = data.fst;
                var new_world = data.snd;
                var new_stack = v : stack;
                [new_stack, st, new_world]
              )
            | WRITE      -> (
                case stack of
                  v : vs -> (
                    var new_world = writeWorld (v, w);
                    [vs, st, new_world]
                  )
                esac
              )
            | BINOP (op) -> (
                case stack of
                  y : x : vs -> (
                    var result = evalExpr (st, Binop (op, Const (x), Const (y)));
                    var new_stack = result : vs;
                    [new_stack, st, w]
                  )
                esac
              )
            | LD (x)     -> (
                var new_stack = st (x) : stack;
                [new_stack, st, w]
              )
            | ST (x)     -> (
                case stack of
                  v : vs -> [vs, st <- [x, v], w]
                esac
              )
            | CONST (n)  -> [n : stack, st, w]
            | {}              -> c
        esac
    }

    foldl(evalInstruction, c, insns)
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
    case expr of
      Var (x)          -> {LD (x)}
    | Const (n)        -> {CONST (n)}
    | Binop (op, l, r) -> compileExpr (l) +++ compileExpr (r) +++ {BINOP (op)}
    esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
    case stmt of
      Assn (x, e) -> compileExpr (e) +++ {ST (x)}
    | Seq (l, r) -> compileSM (l) +++ compileSM (r)
    | Skip -> {}
    | Read (x) -> {READ, ST (x)}
    | Write (e) -> compileExpr (e) +++ {WRITE}
    esac
}
