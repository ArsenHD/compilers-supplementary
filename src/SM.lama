-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c, insns) {
    fun evalInstruction(c@[stack, st, w], instr, insns) {
        case instr of
              READ       ->
                case readWorld (w) of
                  [v, w] -> [insns, [v : stack, st, w]]
                esac
            | WRITE      -> (
                case stack of
                  v : vs -> (
                    var newWorld = writeWorld (v, w);
                    [insns, [vs, st, newWorld]]
                  )
                esac
              )
            | BINOP (op) -> (
                case stack of
                  y : x : vs -> (
                    var result = evalOp (op, x, y);
                    var new_stack = result : vs;
                    [insns, [new_stack, st, w]]
                  )
                esac
              )
            | LD (x)     -> [insns, [st (x) : stack, st, w]]
            | LDA (x) -> [insns, [Ref (x) : stack, st, w]]
            | ST (x)     -> (
                case stack of
                  v : vs -> [insns, [v : vs, st <- [x, v], w]]
                esac
              )
            | STI ->
                case stack of
                  v : Ref (x) : vs -> [insns, [v : vs, st <- [x, v], w]]
                esac
            | CONST (n)    -> [insns, [n : stack, st, w]]
            | LABEL (label)    -> [insns, [stack, st, w]]
            | JMP   (label)    -> [env.fromLabel (label), [stack, st, w]]
            | CJMP  (condition, label) ->
              case stack of
                x : xs ->
                  case condition of
                    Z  ->
                      if x == 0
                        then [env.fromLabel (label), [xs, st, w]]
                        else [insns, [xs, st, w]]
                      fi
                    | NZ ->
                      if x == 0
                        then [insns, [xs, st, w]]
                        else [env.fromLabel (label), [xs, st, w]]
                      fi
                  esac
              esac
          | DROP ->
              case stack of
                v : vs -> [insns, [vs, st, w]]
              esac
          | DUP ->
              case stack of
                v : vs -> [insns, [v : v : vs, st, w]]
              esac
        esac
    }

    case insns of
      ins : insns ->
        case evalInstruction (c, ins, insns) of
          [insns, c] -> eval (env, c, insns)
        esac
    | {} -> c
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun compile (env, stmt) {
    case stmt of
      Skip           -> [env, emptyBuffer ()]
    | Var    (x)     -> [env, singletonBuffer (LD (x))]
    | Ref    (x)     -> [env, singletonBuffer (LDA (x))]
    | Const  (n)     -> [env, singletonBuffer (CONST (n))]
    | Binop (op, l, r) ->
        case compile (env, l) of [env, lCode] ->
          case compile (env, r) of [env, rCode] ->
            [env, lCode <+> rCode <+ BINOP (op)]
            esac
        esac
    | Read  (expr)      ->
        case compile (env, expr) of
          [env, exprCode] -> [env, exprCode <+ READ <+ STI <+ DROP]
        esac
    | Write (expr)      ->
        case compile (env, expr) of
          [env, exprCode] -> [env, exprCode <+ WRITE]
        esac
    | Assn  (x, e)   ->
        case compile (env, x) of [env, varCode] ->
            case compile (env, e) of [env, exprCode] ->
                [env, varCode <+> exprCode <+ STI]
            esac
        esac
    | Seq   (s1, s2) ->
        case compile (env, s1) of [env, s1Code] ->
          case compile (env, s2) of [env, s2Code] ->
            [env, s1Code <+> s2Code]
          esac
        esac
    | If (condition, thenBranch, elseBranch) ->
      case env.genLabels (3) of [thenLabel, elseLabel, endLabel, env] ->
        case compile (env, thenBranch) of [env, thenCode] ->
          case compile (env, elseBranch) of [env, elseCode] ->
            case compile (env, condition) of [env, conditionCode] ->
              [env,
                conditionCode
                  <+ CJMP (Z, elseLabel)
                  <+> thenCode
                  <+ JMP (endLabel)
                  <+ LABEL (elseLabel)
                  <+> elseCode
                  <+ LABEL (endLabel)
              ]
            esac
          esac
        esac
      esac
    | While (condition, body)                ->
      case env.genLabels (2) of [condLabel, bodyLabel, env] ->
        case compile (env, body) of [env, bodyCode] ->
          case compile (env, condition) of [env, conditionCode] ->
            [env,
              singletonBuffer (JMP (condLabel))
                <+ LABEL (bodyLabel)
                <+> bodyCode
                <+ LABEL (condLabel)
                <+> conditionCode
                <+ CJMP (NZ, bodyLabel)
            ]
          esac
        esac
      esac
    | DoWhile (body, condition)              -> (
      var loop = While (condition, body);
      compile (env, Seq (body, loop))
    )
    | Ignore (e) ->
        case compile (env, e) of
          [env, code] -> [env, code <+ DROP]
        esac
    | _              -> failure ("compileSM not implemented\n")
    esac
  }

  case compile (initCompEnv (), stmt) of [_, code] ->
    getBuffer (code)
  esac
}
